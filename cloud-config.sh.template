#!/bin/bash

LOG="/var/log/packer_init.log"
touch "${LOG}"
chmod 0644 "${LOG}"
echo "Running cloud init to attach AWS EIP" >> "${LOG}"

currentscript="$0"

# Function that is called when the script exits:
function finish {
    echo "Securely shredding ${currentscript}"; shred -u ${currentscript};
}

# function that replaces AMI-defined yum repositories with RH CDN access
#   via an embedded key and .repo file. Key and .repo file are in-lined
#   in this script via the build.sh script when creating this
#   cloud-config.sh from a template.
function replace_yum_config {
echo Replacing AMI yum repository configuration...

sudo sed -i 's|enabled=1|enabled=0|g' /etc/yum.repos.d/*.repo

sudo mkdir /tmp/key

# Ensure a newline after content so that EOF does not end up on a line with content if the content is not terminated by a newline
cat << 'EOF' > /tmp/rh-cdn.pem
CDN_PEM_CONTENT

EOF

sudo mv /tmp/rh-cdn.pem /tmp/key/rh-cdn.pem
sudo chmod 0755 /tmp/key
sudo chown root.root /tmp/key/rh-cdn.pem
sudo chmod 0644 /tmp/key/rh-cdn.pem
sudo restorecon -v /tmp/key/rh-cdn.pem

# Ensure a newline after content so that EOF does not end up on a line with content if the content is not terminated by a newline
cat << 'EOF' > /tmp/quay_image.repo
YUM_REPO_CONTENT

EOF

sudo mv /tmp/quay_image.repo /etc/yum.repos.d/quay_image.repo
sudo chown root.root /etc/yum.repos.d/quay_image.repo
sudo chmod 0644 /etc/yum.repos.d/quay_image.repo
sudo restorecon -v /etc/yum.repos.d/quay_image.repo

echo AMI yum repository configuration replaced.
}

{
# Hardening is causing this to be an issue
# TODO: Find hardening rule that causes this issue
chage -M 99999 root

# determine whether to replace existing AMI yum configuration
# with a configuration that works from the build pipeline
# The value REPLACE_AMI_YUM_CONFIG_PLACEHOLDER is replaced during
# processing of this template.
if [[ "REPLACE_AMI_YUM_CONFIG_PLACEHOLDER" == "true" ]]; then
  replace_yum_config
else
  echo "Using existing yum configuration in the AMI"
fi

# Need to install python and pip modules in the same way the bootstrap.yaml would do
# for consistency. Need the awscli to associate the EIP address in cloud-init
dnf -y install ansible-core python39

echo '*** Installing AWS CLI... ***'
# TODO: replace awscli from pip with a container? Is a pull secret required?
sudo -u ec2-user pip3 install --user --upgrade pip
sudo -u ec2-user pip3 install --user --upgrade wheel
sudo -u ec2-user pip3 install --user --upgrade awscli

echo '*** Associating Elastic IP Address with instance... ***'
# Determine what region the instance is in
export AWS_DEFAULT_REGION=$(curl http://169.254.169.254/latest/meta-data/placement/region/)

# Determine instance ID
sudo AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} -u ec2-user /home/ec2-user/.local/bin/aws ec2 describe-instances \
  --instance-ids $(curl -s "http://169.254.169.254/latest/meta-data/instance-id") 2>&1 | tee -a "${LOG}"

# Associate Elastic IP Address with the instance
sudo AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} -u ec2-user /home/ec2-user/.local/bin/aws ec2 associate-address \
  --instance-id $(curl -s "http://169.254.169.254/latest/meta-data/instance-id") \
  --allocation-id eipalloc-abc123 2>&1 | tee -a "${LOG}"
} 2>&1 >> "${LOG}"

# Call the secure shred function to delete self because script contains RHN user and passwd
trap finish EXIT
